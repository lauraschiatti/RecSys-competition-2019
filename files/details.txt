
# ------------------------------------------------------------------ #
       ##### Recommender System 2019 Challenge Polimi #####
# ------------------------------------------------------------------ #


# App domain: Online store. The dataset contains 4 months of transactions collected from an online supermarket.
# ----------


# Train-test split : leave-one-out
# --------------------------------
- Sampling one random interaction from each user profile (remove one random interaction)
- Therefore there is only one positive interaction for each user in the test set


# Goal: build a top-10 recommender
# --------------------------------
- recommend a list of 10 potentially relevant items for each user (discover which item a user will interact with.)


# Evaluation metric: MAP@10
# -------------------------


Any kind of recommender algorithm you wish (e.g., collaborative-filtering, content-based, hybrid, etc.) written in Python or R
# ----------------------------------------


# Dataset description:
# -------------------
each file contains coordinates and the values of the non-zero cells of the sparse matrix that represent the relative information


# Interactions files (URM)
# ------------------------

###### data_train.csv ######  training set describing interactions

- implicit ratings (implicit preferences expressed by users)
- contains both cold items and cold users
- user-item pair means the user interacted with the item (the user did buy a product)

    row       |     col       |       data
______________|_______________|__________________

  user_id        item_id        value of the preference (rating)



# Item content files (ICM): additional info about items
# ------------------------

###### data_ICM_asset.csv ######  description of the item (id)
###### data_ICM_price.csv ######  price of each item (already normalized)
###### data_ICM_sub_class.csv ######  categorization of the item (number)

    row       |     col       |       data
______________|_______________|__________________

   item_id       feature_id     value of the cell



# User content files (User Content Matrix)  additional info about users (demographics)
# ----------------------------------------

###### data_UCM_age.csv ######  already normalized
###### data_UCM_region.csv ######  one-hot encoding of the user's region

    row       |     col       |       data
______________|_______________|__________________

   user_id       feature_id     value of the cell



# Submission file (sample_submission.csv)   HEADERS [user_id],[items_list]
#----------------------------------------

 HEADERS [user_id],[items_list]

Each row is a user [user_id] , [ordered list of 10 recommended items separated by a space]

(1, 0 1 2 3 4 5 6 7 8 9)

- Order is important in MAP: The items are ordered by relevance (most important first)
    - different orders may provide different MAP
- Leave tags for columns at the beginning ==> user_id, item_list


# Important: avoid overfitting the public test set
# ------------------------------------------------

- Download train set and perform local and split train/test locally before making a submission
- compare local score with score given on the public test. If there are close, the model is not overfitting the local test set

